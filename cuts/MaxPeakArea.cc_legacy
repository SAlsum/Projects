#include "MaxPeakArea.h"
#include "../Settings.h"
#include "../utility/StandardPlots.h"
#include "../utility/PlotUtils.h"

#include <vector>
#include <iostream>

#include "TH2F.h"
#include "TGraph.h"
#include "TCanvas.h"

using std::vector;
using std::string;



MaxPeakAreaCut::MaxPeakAreaCut()
  : Cut("MaxPeakAreaCut")
{}

void MaxPeakAreaCut::performCut(dataContainer &d){
  vector<int> newKeepIndex;
  int index;
  for(int aaEvent = 0; aaEvent < d.keepIndex.size(); aaEvent++){
    index = d.keepIndex[aaEvent];
    float mpaAdjusted = driftAdjust(d.drifts[index],
                                    d.maxPeakAreas[index] / d.s1s[index]);
    if(/*(d.s1s[index] <= 112.522111 and
         d.maxPeakAreas[index] > (0.10207864 * d.s1s[index] + 2.94551845) ) or
         (d.s1s[index] > 112.522111 and
         d.maxPeakAreas[index] > (0.1073 * d.s1s[index] + 2.358) ) */
       
       /*(d.s1s[index] < 81 and
        d.maxPeakAreas[index] > 1.96609
        + 0.150905 * d.s1s[index]
        - 0.00174139 * pow(d.s1s[index], 2)
        + 1.12454e-05 * pow(d.s1s[index], 3)) or
       (d.s1s[index] >= 81 and
        d.maxPeakAreas[index] > -0.900224
        + 0.161925 * d.s1s[index]
        - 0.000584573 * pow(d.s1s[index], 2)
        + 1.00188e-06 * pow(d.s1s[index], 3))*/

       (mpaAdjusted > -439.514 * pow(d.s1s[index], -3)
       + 215.181 * pow(d.s1s[index], -2)
       + 13.4623 * pow(d.s1s[index], -1)
       + 5.40771
       - 0.123231 * d.s1s[index]
       + 0.00170565 * pow(d.s1s[index], 2)
       - 1.11185e-05 * pow(d.s1s[index], 3)
       + 3.34597e-08 * pow(d.s1s[index], 4)
       - 3.7695e-11 * pow(d.s1s[index], 5)
       and d.s1s[index] >= 4)
       or (d.s1s[index] < 4 and
           d.maxPeakAreas[index] > 1.96609 + 0.150905 * d.s1s[index])
       ){
      d.cutMask[index] = true;
      d.recentlyCutIndex.push_back(index);
    } else {newKeepIndex.push_back(index);}
  }
  d.keepIndex = newKeepIndex;
}

void MaxPeakAreaCut::plot(dataContainer &d, string plotPrefix){
  plotStandards(d, plotPrefix);
  plotUniques(d, plotPrefix);
}

void MaxPeakAreaCut::plotUniques(dataContainer &d, string plotPrefix){

  // set up histograms
  TH2F* s1MPAHist = new TH2F((plotPrefix + "_s1MPA").c_str(),
                             (plotPrefix + "_s1MPA").c_str(),
                             299, 1, 300, 100, 0, 100);
  TH2F* s1MPALEHist = new TH2F((plotPrefix + "_LE_s1MPA").c_str(),
                               (plotPrefix + "_LE_s1MPA").c_str(),
                               299, 1, 90, 100, 0, 100);
  TH2F* s1AdjMPAHist = new TH2F((plotPrefix + "_s1AdjMPA").c_str(),
                                (plotPrefix + "_s1AdjMPA").c_str(),
                                299, 1, 300, 50, 0, 20);

  // loop through and add non-masked events to the histogram
  int index;
  for(int aaEvent = 0; aaEvent < d.keepIndex.size(); aaEvent++){
    index = d.keepIndex[aaEvent];
    s1MPAHist->Fill(d.s1s[index], d.maxPeakAreas[index]);
    s1MPALEHist->Fill(d.s1s[index], d.maxPeakAreas[index]);
    s1AdjMPAHist->Fill(d.s1s[index], driftAdjust(d.drifts[index],
                                                 d.maxPeakAreas[index] /
                                                 d.s1s[index]));
  } // end event loop

  // save an image of the histograms
  TCanvas* s1MPACanvas = new TCanvas();
  s1MPAHist->Draw("COLZ");
  s1MPACanvas->SaveAs(("plots/" + plotPrefix + "_S1MPA.png").c_str());

  TCanvas* s1MPALECanvas = new TCanvas();
  s1MPALEHist->Draw("COLZ");
  s1MPALECanvas->SaveAs(("plots/" + plotPrefix + "_LE_S1MPA.png").c_str());

  TCanvas* s1AdjMPACanvas = new TCanvas();
  s1AdjMPAHist->Draw("COLZ");
  s1AdjMPACanvas->SaveAs(("plots/" + plotPrefix + "_S1AdjMPA.png").c_str());
  
  // make plots again with recently cut events
  if(d.recentlyCutIndex.size() > 0){
    TGraph* s1MPAGraph = new TGraph(d.recentlyCutIndex.size());
    TGraph* s1MPALEGraph = new TGraph(d.recentlyCutIndex.size());
    TGraph* s1AdjMPAGraph = new TGraph(d.recentlyCutIndex.size());

    for(int aaPoint = 0; aaPoint < d.recentlyCutIndex.size(); aaPoint++){
      int index = d.recentlyCutIndex[aaPoint];
      s1MPAGraph->SetPoint(aaPoint, d.s1s[index], d.maxPeakAreas[index]);
      s1MPALEGraph->SetPoint(aaPoint, d.s1s[index], d.maxPeakAreas[index]);
      s1AdjMPAGraph->SetPoint(aaPoint, d.s1s[index],
                              driftAdjust(d.drifts[index],
                                          d.maxPeakAreas[index] /
                                          d.s1s[index]));
    }

    // save image
    TCanvas* s1MPACutCanvas = new TCanvas();
    s1MPAHist->Draw("COLZ");
    stylizeCutGraph(s1MPAGraph);
    s1MPAGraph->Draw("psame");
    s1MPACutCanvas->SaveAs(("plots/" + plotPrefix +
                            "_wCuts_S1MPA.png").c_str());

    TCanvas* s1MPALECutCanvas = new TCanvas();
    s1MPALEHist->Draw("COLZ");
    stylizeCutGraph(s1MPALEGraph);
    s1MPALEGraph->Draw("psame");
    s1MPALECutCanvas->SaveAs(("plots/" + plotPrefix +
                              "_wCuts_LE_S1MPA.png").c_str());

    TCanvas* s1AdjMPACutCanvas = new TCanvas();
    s1AdjMPAHist->Draw("COLZ");
    stylizeCutGraph(s1AdjMPAGraph);
    s1AdjMPAGraph->Draw("psame");
    s1AdjMPACutCanvas->SaveAs(("plots/" + plotPrefix +
                              "_wCuts_S1AdjMPA.png").c_str());
  }
  
}


float MaxPeakAreaCut::driftAdjust(float drift, float mpaFraction){
  return mpaFraction/(0.0465434
              + 3.42106e-05 * drift
              - 1.06475e-07 * pow(drift, 2)
              - 2.54004e-10 * pow(drift, 3)
              + 9.47525e-13 * pow(drift, 4)
              + 1.11788e-14 * pow(drift, 5));
}
